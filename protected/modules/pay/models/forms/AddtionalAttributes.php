<?php
namespace pay\models\forms;

use pay\models\AdditionalAttribute;

class AddtionalAttributes extends \CFormModel
{
    private $attributes;
    private $values;

    /**
     * @param \pay\models\AdditionalAttribute[] $attributes
     * @param string[] $values
     * @param string $scenario
     */
    public function __construct($attributes, $values, $scenario = '')
    {
        $this->attributes = $attributes;
        $this->values = $values;
        parent::__construct($scenario); // TODO: Change the autogenerated stub
    }

    private $rules = null;
    public function rules()
    {
        if ($this->rules == null)
        {
            $this->rules = [
                [implode(',', $this->attributeNames()),'required']
            ];
        }
        return $this->rules;
    }

    private $labels = null;
    public function attributeLabels()
    {
        if ($this->labels == null)
        {
            foreach ($this->attributes as $attr)
            {
                $this->labels[$attr->Name] = $attr->Label;
            }
        }
        return $this->labels;
    }

    /**
     * @return string[]
     */
    public function attributeNames()
    {
        $names = [];
        foreach ($this->attributes as $attr)
        {
            $names[] = $attr->Name;
        }
        return $names;
    }

    public function __get($name)
    {
        if (in_array($name, $this->attributeNames()))
        {
            if (array_key_exists($name, $this->values))
            {
                return $this->values[$name];
            }
            return '';
        }
        return parent::__get($name);
    }

    public function __set($name, $value)
    {
        if (in_array($name, $this->attributeNames()))
        {
            $this->values[$name] = $value;
            return $value;
        }
        return parent::__set($name, $value);
    }


    /**
     * @param $name
     * @return null|string
     * @throws \application\components\Exception
     */
    public function getControlGroupHtml($name)
    {
        $type = null;
        foreach ($this->attributes as $attr) {
            if ($attr->Name == $name) {
                $type = $attr->Type;
                break;
            }
        }

        if ($type == null)
            throw new \application\components\Exception('Не найдено поле с именем: '.$name);

        $result = '<div class="control-group">';
        switch ($type) {
            case AdditionalAttribute::TypeText:
                $result .= \CHtml::activeLabel($this, $name, ['class' => 'control-label']);
                $result .= \CHtml::tag('div', ['class' => 'controls'], \CHtml::activeTextField($this, $name, ['class' => 'input-block-level']));
                break;
            case AdditionalAttribute::TypeTextarea:
                $result .= \CHtml::activeLabel($this, $name, ['class' => 'control-label']);
                $result .= \CHtml::tag('div', ['class' => 'controls'], \CHtml::activeTextArea($this, $name, ['class' => 'input-block-level']));
                break;
            case AdditionalAttribute::TypeBoolean:
                $result .= \CHtml::label(
                    \CHtml::activeCheckBox($this, $name) . ' ' . $this->getAttributeLabel($name),
                    '',
                    ['class' => 'checkbox']
                );
                break;
            default:
                throw new \application\components\Exception('Неизветный тип поля: '.$type);
        }
        $result .= '</div>';
        return $result;
    }

    /**
     * @return bool
     */
    public function getIsEmpty()
    {
        return empty($this->attributes);
    }

    /**
     * Проверяет была ли заполнена форма
     */
    public function getIsValid()
    {
        $valid = $this->validate();
        $this->clearErrors();
        return $valid;
    }
} 